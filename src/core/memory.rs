use {
  core::{
    cpu::Cpu,
    keys::Keys,
  },
  rand,
};

const CART_SIZE: usize = 0x8000;
const SRAM_SIZE: usize = 0x2000;
const IO_SIZE: usize = 0x100;
const VRAM_SIZE: usize = 0x2000;
const OAM_SIZE: usize = 0x100;
const WRAM_SIZE: usize = 0x2000;
const HRAM_SIZE: usize = 0x80;

pub struct Memory {
  // TODO: Refactor these to use actual devices once starting to get stuff displayed
  cart: [u8; CART_SIZE],
  sram: [u8; SRAM_SIZE],
  io: [u8; IO_SIZE],
  vram: [u8; VRAM_SIZE],
  oam: [u8; OAM_SIZE],
  wram: [u8; WRAM_SIZE],
  hram: [u8; HRAM_SIZE],
  keys: Keys,
}

impl Memory {
  pub fn new() -> Memory {
    Memory {
      cart: [0; CART_SIZE],
      sram: [0; SRAM_SIZE],
      // TODO Is this correct?
      io: [
        0x0F, 0x00, 0x7C, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
        0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00, 0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
        0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
        0x91, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
        0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
        0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
        0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
        0x45, 0xEC, 0x52, 0xFA, 0x08, 0xB7, 0x07, 0x5D, 0x01, 0xFD, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,
        0x0B, 0xF8, 0xC2, 0xCE, 0xF4, 0xF9, 0x0F, 0x7F, 0x45, 0x6D, 0x3D, 0xFE, 0x46, 0x97, 0x33, 0x5E,
        0x08, 0xEF, 0xF1, 0xFF, 0x86, 0x83, 0x24, 0x74, 0x12, 0xFC, 0x00, 0x9F, 0xB4, 0xB7, 0x06, 0xD5,
        0xD0, 0x7A, 0x00, 0x9E, 0x04, 0x5F, 0x41, 0x2F, 0x1D, 0x77, 0x36, 0x75, 0x81, 0xAA, 0x70, 0x3A,
        0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF, 0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00,
      ],
      vram: [0; VRAM_SIZE],
      oam: [0; OAM_SIZE],
      wram: [0; WRAM_SIZE],
      hram: [0; HRAM_SIZE],
      keys: Keys::new(),
    }
  }

  pub fn read_byte(&self, cpu: &Cpu, address: u16) -> u8 {
    if address <= 0x7FFF {
      return self.cart[address as usize];
    }
    if address >= 0xA000 && address <= 0xBFFF {
      return self.sram[(address - 0xA000) as usize];
    }
    if address >= 0x8000 && address <= 0x9FFF {
      return self.vram[(address - 0x8000) as usize];
    }
    if address >= 0xC000 && address <= 0xDFFF {
      return self.wram[(address - 0xC000) as usize];
    }
    if address >= 0xE000 && address <= 0xFDFF {
      return self.wram[(address - 0xE000) as usize];
    }
    if address >= 0xFE00 && address <= 0xFEFF {
      return self.oam[(address - 0xFE00) as usize];
    }
    // TODO: Check if this random number generator works
    if address == 0xFF04 {
      return rand::random::<u8>();
    }
    // TODO: Add GPU
    if address == 0xFF00 {
      if (self.io[0x00] & 0x20) == 0 {
        return 0xC0 | self.keys.get_keys_1() | 0x10;
      }
      if (self.io[0x00] & 0x10) == 0 {
        return 0xC0 | self.keys.get_keys_2() | 0x20;
      }
      if (self.io[0x00] & 0x30) == 0 {
        return 0xFF;
      }
      return 0;
    }
    // TODO: Add interrupt
    if address>= 0xFF80 && address <= 0xFFFE {
      return self.hram[(address - 0xFF80) as usize];
    }
    if address >= 0xFF00 && address <= 0xFF7F {
      return self.io[(address - 0xFF00) as usize];
    }
    return 0;
  }

  pub fn read_short(&self, cpu: &Cpu, address: u16) -> u16 {
    self.read_byte(cpu, address) as u16 | (self.read_byte(cpu, address + 1) as u16) << 8
  }

  pub fn read_short_from_stack(&self, cpu: &mut Cpu) -> u16 {
    let sp = cpu.registers.sp;
    let value = self.read_short(cpu, sp);
    cpu.registers.sp += 2;
    value
  }

  pub fn write_byte(&mut self, cpu: &mut Cpu, address: u16, value: u8) {
    if address >= 0xA000 && address <= 0xBFFF {
      self.sram[(address - 0xA000) as usize] = value;
    }
    if address >= 0x8000 && address <= 0x9fff {
      self.vram[(address - 0x8000) as usize] = value;
      if address <= 0x97FF {
        // TODO: Update tile
      }
    }
    if address >= 0xC000 && address <= 0xDFFF {
      self.wram[(address - 0xC000) as usize] = value;
    }
    if address >= 0xE000 && address <= 0xFDFF {
      self.wram[(address - 0xE000) as usize] = value;
    }
    if address >= 0xFE00 && address <= 0xFEFF {
      self.oam[(address - 0xFE00) as usize] = value;
    }
    if address >= 0xFF80 && address <= 0xFFFE {
      self.hram[(address - 0xFF80) as usize] = value
    }
    // TODO: Add GPU
    // TODO: Add background and sprite palette
    if address >= 0xFF00 && address <= 0xFF7F {
      self.io[(address - 0xFF00) as usize] = value;
    }
    // TODO: Add interrupt
  }

  pub fn write_short(&mut self, cpu: &mut Cpu, address: u16, value: u16) {
    self.write_byte(cpu, address, (value & 0x00FF) as u8);
    self.write_byte(cpu, address + 1, ((value & 0xFF00) >> 8) as u8);
  }

  pub fn write_short_to_stack(&mut self, cpu: &mut Cpu, value: u16) {
    cpu.registers.sp -= 2;
    self.write_short(cpu, cpu.registers.sp, value);
  }
}
